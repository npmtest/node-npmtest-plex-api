{"/home/travis/build/npmtest/node-npmtest-plex-api/test.js":"/* istanbul instrument in package npmtest_plex_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plex-api/lib.npmtest_plex_api.js":"/* istanbul instrument in package npmtest_plex_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_plex_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_plex_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-plex-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-plex-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_plex_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_plex_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_plex_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_plex_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_plex_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_plex_api.__dirname + '/lib.npmtest_plex_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plex-api/node_modules/plex-api/lib/api.js":"var os = require('os');\nvar uuid = require('uuid');\nvar url = require('url');\nvar request = require('request');\nvar xml2js = require('xml2js');\nvar headers = require('plex-api-headers');\nvar extend = require('util')._extend;\n\nvar uri = require('./uri');\n\nvar PLEX_SERVER_PORT = 32400;\n\nfunction PlexAPI(options, deprecatedPort) {\n    var opts = options || {};\n    var hostname = typeof options === 'string' ? options : options.hostname;\n\n    this.hostname = hostname;\n    this.port = deprecatedPort || opts.port || PLEX_SERVER_PORT;\n    this.https = opts.https;\n    this.timeout = opts.timeout;\n    this.username = opts.username;\n    this.password = opts.password;\n    this.managedUser = opts.managedUser;\n    this.authToken = opts.token;\n    this.authenticator = opts.authenticator || this._credentialsAuthenticator();\n    this.responseParser = opts.responseParser || this._defaultResponseParser;\n    this.options = opts.options || {};\n    this.options.identifier = this.options.identifier || uuid.v4();\n    this.options.product = this.options.product || 'Node.js App';\n    this.options.version = this.options.version || '1.0';\n    this.options.device = this.options.device || os.platform();\n    this.options.deviceName = this.options.deviceName || 'Node.js App';\n    this.options.platform = this.options.platform || 'Node.js';\n    this.options.platformVersion = this.options.platformVersion || process.version;\n\n    if (typeof this.hostname !== 'string') {\n        throw new TypeError('Invalid Plex Server hostname');\n    }\n    if (typeof deprecatedPort !== 'undefined') {\n        console.warn('PlexAPI constuctor port argument is deprecated, use an options object instead.');\n    }\n\n    this.serverUrl = hostname + ':' + this.port;\n    this._initializeAuthenticator();\n}\n\nPlexAPI.prototype.getHostname = function getHostname() {\n    return this.hostname;\n};\n\nPlexAPI.prototype.getPort = function getPort() {\n    return this.port;\n};\n\nPlexAPI.prototype.getIdentifier = function getIdentifier() {\n    return this.options.identifier;\n};\n\nPlexAPI.prototype.query = function query(options) {\n    if (typeof options === 'string') {\n        // Support old method of only supplying a single `url` parameter\n        options = { uri: options };\n    }\n    if (options.uri === undefined) {\n        throw new TypeError('Requires uri parameter');\n    }\n\n    options.method = 'GET';\n    options.parseResponse = true;\n\n    return this._request(options).then(uri.attach(options.uri));\n};\n\nPlexAPI.prototype.postQuery = function postQuery(options) {\n    if (typeof options === 'string') {\n        // Support old method of only supplying a single `url` parameter\n        options = { uri: options };\n    }\n    if (options.uri === undefined) {\n        throw new TypeError('Requires uri parameter');\n    }\n\n    options.method = 'POST';\n    options.parseResponse = true;\n\n    return this._request(options).then(uri.attach(url));\n};\n\nPlexAPI.prototype.putQuery = function putQuery(options) {\n    if (typeof options === 'string') {\n        // Support old method of only supplying a single `url` parameter\n        options = { uri: options };\n    }\n    if (options.uri === undefined) {\n        throw new TypeError('Requires uri parameter');\n    }\n\n    options.method = 'PUT';\n    options.parseResponse = true;\n\n    return this._request(options).then(uri.attach(url));\n};\n\nPlexAPI.prototype.perform = function perform(options) {\n    if (typeof options === 'string') {\n        // Support old method of only supplying a single `url` parameter\n        options = { uri: options };\n    }\n    if (options.uri === undefined) {\n        throw new TypeError('Requires uri parameter');\n    }\n\n    options.method = 'GET';\n    options.parseResponse = false;\n\n    return this._request(options);\n};\n\nPlexAPI.prototype.find = function find(options, criterias) {\n    if (typeof options === 'string') {\n        // Support old method of only supplying a single `url` parameter\n        options = { uri: options };\n    }\n    if (options.uri === undefined) {\n        throw new TypeError('Requires uri parameter');\n    }\n\n    return this.query(options).then(function(result) {\n        return filterChildrenByCriterias(result._children, criterias);\n    });\n};\n\nPlexAPI.prototype._request = function _request(options) {\n    var reqUrl = this._generateRelativeUrl(options.uri);\n    var method = options.method;\n    var timeout = this.timeout;\n    var parseResponse = options.parseResponse;\n    var extraHeaders = options.extraHeaders || {};\n    var self = this;\n\n    var requestHeaders = headers(\n        this,\n        extend(\n            {\n                Accept: 'application/json',\n                'X-Plex-Token': this.authToken,\n                'X-Plex-Username': this.username\n            },\n            extraHeaders\n        )\n    );\n\n    var reqOpts = {\n        uri: url.parse(reqUrl),\n        encoding: null,\n        method: method || 'GET',\n        timeout: timeout,\n        gzip: true,\n        headers: requestHeaders\n    };\n\n    return new Promise((resolve, reject) => {\n        request(reqOpts, function onResponse(err, response, body) {\n            if (err) {\n                return reject(err);\n            }\n\n            // 403 forbidden when managed user does not have sufficient permission\n            if (response.statusCode === 403) {\n                return reject(new Error('Plex Server denied request due to lack of managed user permissions!'));\n            }\n\n            // 401 unauthorized when authentication is required against the requested URL\n            if (response.statusCode === 401) {\n                if (self.authenticator === undefined) {\n                    return reject(\n                        new Error(\n                            'Plex Server denied request, you must provide a way to authenticate! ' +\n                                'Read more about plex-api authenticators on https://www.npmjs.com/package/plex-api#authenticators'\n                        )\n                    );\n                }\n\n                return resolve(\n                    self._authenticate().then(function() {\n                        return self._request(options);\n                    })\n                );\n            }\n\n            if (response.statusCode < 200 || response.statusCode > 299) {\n                return reject(\n                    new Error(\n                        'Plex Server didnt respond with a valid 2xx status code, response code: ' + response.statusCode\n                    )\n                );\n            }\n\n            // prevent holding an open http agent connection by pretending to consume data,\n            // releasing socket back to the agent connection pool: http://nodejs.org/api/http.html#http_agent_maxsockets\n            response.on('data', function onData() {});\n\n            return parseResponse ? resolve(self.responseParser(response, body)) : resolve();\n        });\n    });\n};\n\nPlexAPI.prototype._authenticate = function _authenticate() {\n    return new Promise((resolve, reject) => {\n        if (this.authToken) {\n            return reject(\n                new Error(\n                    'Permission denied even after attempted authentication :( Wrong username and/or password maybe?'\n                )\n            );\n        }\n\n        this.authenticator.authenticate(this, (err, token) => {\n            if (err) {\n                return reject(new Error('Authentication failed, reason: ' + err.message));\n            }\n            this.authToken = token;\n            resolve();\n        });\n    });\n};\n\nPlexAPI.prototype._credentialsAuthenticator = function _credentialsAuthenticator() {\n    var credentials;\n\n    if (this.username && this.password) {\n        credentials = require('plex-api-credentials');\n        return credentials({\n            username: this.username,\n            password: this.password,\n            managedUser: this.managedUser\n        });\n    }\n    return undefined;\n};\n\nPlexAPI.prototype._initializeAuthenticator = function _initializeAuthenticator() {\n    if (this.authenticator && typeof this.authenticator.initialize === 'function') {\n        this.authenticator.initialize(this);\n    }\n};\n\nPlexAPI.prototype._generateRelativeUrl = function _generateRelativeUrl(relativeUrl) {\n    return this._serverScheme() + this.serverUrl + relativeUrl;\n};\n\nPlexAPI.prototype._serverScheme = function _serverScheme() {\n    if (typeof this.https !== 'undefined') {\n        // If https is supplied by the user, always do what it says\n        return this.https ? 'https://' : 'http://';\n    }\n    // Otherwise, use https if it's on port 443, the standard https port.\n    return this.port === 443 ? 'https://' : 'http://';\n};\n\nPlexAPI.prototype._defaultResponseParser = function _defaultResponseParser(response, body) {\n    if (response.headers['content-type'] === 'application/json') {\n        return Promise.resolve(body.toString('utf8')).then(JSON.parse);\n    } else if (response.headers['content-type'].indexOf('xml') > -1) {\n        return xmlToJSON(body.toString('utf8'), {\n            attrkey: 'attributes'\n        });\n    }\n\n    return Promise.resolve(body);\n};\n\nfunction xmlToJSON(str, options) {\n    return new Promise((resolve, reject) => {\n        xml2js.parseString(str, options, (err, jsonObj) => {\n            if (err) {\n                return reject(err);\n            }\n            resolve(jsonObj);\n        });\n    });\n}\n\nfunction filterChildrenByCriterias(children, criterias) {\n    var context = {\n        criterias: criterias || {}\n    };\n\n    return children.filter(criteriasMatchChild, context);\n}\n\nfunction criteriasMatchChild(child) {\n    var criterias = this.criterias;\n\n    return Object.keys(criterias).reduce(function matchCriteria(hasFoundMatch, currentRule) {\n        var regexToMatch = new RegExp(criterias[currentRule]);\n        return regexToMatch.test(child[currentRule]);\n    }, true);\n}\n\nmodule.exports = PlexAPI;\n","/home/travis/build/npmtest/node-npmtest-plex-api/node_modules/plex-api-headers/index.js":"'use strict';\n\nvar extend = require('util')._extend;\n\nfunction withoutNulls(obj) {\n    return obj && Object.keys(obj).reduce(function(sum, curr) {\n        if (typeof obj[curr] === 'string') {\n            sum[curr] = obj[curr];\n        }\n        return sum;\n    }, {});\n}\n\nmodule.exports = function headers(plexApi, extraHeaders) {\n    if (typeof plexApi !== 'object') {\n        throw new TypeError('A PlexAPI object containing .options is required');\n    }\n\n    var options = plexApi.options;\n    extraHeaders = withoutNulls(extraHeaders) || {};\n\n    return extend(extraHeaders, {\n        'X-Plex-Client-Identifier': options.identifier,\n        'X-Plex-Product': options.product,\n        'X-Plex-Version': options.version,\n        'X-Plex-Device': options.device,\n        'X-Plex-Device-Name': options.deviceName,\n        'X-Plex-Platform': options.platform,\n        'X-Plex-Platform-Version': options.platformVersion,\n        'X-Plex-Provides': 'controller'\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-plex-api/node_modules/plex-api/lib/uri.js":"var uriResolvers = {\n    directory: function directory(parentUrl, dir) {\n        addDirectoryUriProperty(parentUrl, dir);\n    },\n\n    server: function server(parentUrl, srv) {\n        addServerUriProperty(srv);\n    }\n};\n\nfunction addServerUriProperty(server) {\n    server.uri = '/system/players/' + server.address;\n}\n\nfunction addDirectoryUriProperty(parentUrl, directory) {\n    if (parentUrl[parentUrl.length - 1] !== '/') {\n        parentUrl += '/';\n    }\n    if (directory.key[0] === '/') {\n        parentUrl = '';\n    }\n    directory.uri = parentUrl + directory.key;\n}\n\nexports.attach = function attach(parentUrl) {\n    return function resolveAndAttachUris(result) {\n        var children = result._children || [];\n\n        children.forEach(function(child) {\n            var childType = child._elementType.toLowerCase();\n            var resolver = uriResolvers[childType];\n\n            if (resolver) {\n                resolver(parentUrl, child);\n            }\n        });\n\n        return result;\n    };\n};\n"}